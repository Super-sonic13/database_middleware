generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model intern {
  id          Int    @id @default(autoincrement())
  explorer_id String @unique @db.VarChar(50)
  discord_id  String @unique @db.VarChar(40)
  first_name  String @db.VarChar(50)
  last_name   String @db.VarChar(50)
  email       String @unique @db.VarChar(50)
  cohort      String? @db.VarChar(50)

  sended_facilitator_feedbacks   facilitator_feedback[] @relation(name: "sender")
  received_facilitator_feedbacks facilitator_feedback[] @relation(name: "receiver")

  sended_event_feedbacks event_feedback[] @relation(name: "sender_event_feedback")

  course_intern      intern_course[]
  event_intern_badge event_intern_badge[]
}

model course {
  id         Int           @id @default(autoincrement())
  start_date DateTime?
  end_date   DateTime?
  course_id  String        @unique @db.VarChar(50)
  events     nobel_event[]

  course_intern intern_course[]
}

model nobel_event {
  id                    Int                    @id @default(autoincrement())
  course_id             Int
  meet_num              Int?
  event_date            DateTime?
  course                course                 @relation(fields: [course_id], references: [id])
  oversight_feedbacks   oversight_feedback[]
  facilitator_feedbacks facilitator_feedback[]
  event_intern_badge    event_intern_badge[]

  @@unique([course_id, meet_num])
}

model oversight_feedback {
  id          Int         @id @default(autoincrement())
  event_id    Int
  feedback    String      @db.VarChar(500)
  attendance  Boolean
  nobel_event nobel_event @relation(fields: [event_id], references: [id])

  @@unique([event_id, feedback])
}

model facilitator_feedback {
  id          Int         @id @default(autoincrement())
  event_id    Int
  sender_id   Int
  receiver_id Int
  feedback    String      @db.VarChar(500)
  attendance  Boolean
  nobel_event nobel_event @relation(fields: [event_id], references: [id])

  sender   intern @relation(fields: [sender_id], references: [id], name: "sender")
  receiver intern @relation(fields: [receiver_id], references: [id], name: "receiver")

  @@unique([event_id, feedback])
}

model event_feedback {
  id        Int    @id @default(autoincrement())
  event_id  Int
  sender_id Int
  comment   String @db.VarChar(500)

  sender intern? @relation("sender_event_feedback", fields: [sender_id], references: [id])

   @@unique([event_id, comment])
}

model badge {
  id                 Int                  @id @default(autoincrement())
  badge_name         String               @db.VarChar(30)
  event_intern_badge event_intern_badge[]
}

model event_intern_badge {
  event     nobel_event @relation(fields: [event_id], references: [id])
  event_id  Int
  badge     badge       @relation(fields: [badge_id], references: [id])
  badge_id  Int
  intern    intern      @relation(fields: [intern_id], references: [id])
  intern_id Int

  @@id([event_id, badge_id, intern_id])
}

model intern_course {
  intern    intern @relation(fields: [intern_id], references: [id])
  intern_id Int
  course    course @relation(fields: [course_id], references: [id])
  course_id Int

  @@id([intern_id, course_id])
}
