generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Contact {
  id               Int    @id @default(autoincrement())
  firstName        String @db.VarChar(50)
  lastName         String @db.VarChar(50)
  email            String @unique @db.VarChar(50)
  age              Int    @db.TinyInt
  country          String @db.VarChar(50)
  timezone         String @db.VarChar(50)
  sourceOfReferral String @db.VarChar(50)

  eduQuestSelectedDateTime DateTime
  eduQuestDecision         String   @db.VarChar(50)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  intern Intern?
}

model Intern {
  id               Int     @id @default(autoincrement())
  explorerId       String  @unique @db.VarChar(50)
  explorerMail     String  @db.VarChar(50)
  explorerPassword String  @db.VarChar(50)
  discordId        String? @db.VarChar(40)
  cohort           String? @db.VarChar(50)

  contactId Int     @unique
  contact   Contact @relation(fields: [contactId], references: [id])

  internCourse InternCourse[] @relation(name: "InternCourse: Intern")

  eventFeedbackSender EventFeedback[]    @relation(name: "EventFeedback: Sender")
  eventInternBadge    EventInternBadge[] @relation(name: "EventInternBadge: Intern")

  facilitatorFeedbackFacilitator FacilitatorFeedback[] @relation(name: "FacilitatorFeedback: Facilitator")
  facilitatorFeedbackIntern      FacilitatorFeedback[] @relation(name: "FacilitatorFeedback: Intern")

  oversightFeedbackOversight   OversightFeedback[] @relation(name: "OversightFeedback: Oversight")
  oversightFeedbackFacilitator OversightFeedback[] @relation(name: "OversightFeedback: Facilitator")
}

model Course {
  id           Int      @id @default(autoincrement())
  courseName   String   @db.VarChar(50)
  courseCipher String   @db.VarChar(50)
  startDate    DateTime
  endDate      DateTime

  events       ClassEvent[]
  courseIntern InternCourse[]
}

model ClassEvent {
  id             Int      @id @default(autoincrement())
  meetNumber     Int      @db.TinyInt
  eventDate      DateTime
  googleMeetLink String   @db.VarChar(50)

  courseId Int
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  classEventTypeId Int
  type             ClassEventType @relation(fields: [classEventTypeId], references: [id])

  eventInternBadge     EventInternBadge[]
  oversightFeedbacks   OversightFeedback[]
  facilitatorFeedbacks FacilitatorFeedback[]
  eventFeedback        EventFeedback[]       @relation(name: "EventFeedback: Event")

  @@unique([courseId, meetNumber])
}

model OversightFeedback {
  id Int @id @default(autoincrement())

  classEventId Int
  classEvent   ClassEvent @relation(fields: [classEventId], references: [id])

  oversightId Int
  oversight   Intern @relation(fields: [oversightId], references: [id], name: "OversightFeedback: Oversight", onDelete: Cascade)

  facilitatorId Int
  facilitator   Intern @relation(fields: [facilitatorId], references: [id], name: "OversightFeedback: Facilitator", onDelete: Cascade)

  feedback String @db.VarChar(500)

  @@unique([classEventId, feedback])
}

model FacilitatorFeedback {
  id Int @id @default(autoincrement())

  classEventId Int
  classEvent   ClassEvent @relation(fields: [classEventId], references: [id])

  facilitatorId Int
  facilitator   Intern @relation(fields: [facilitatorId], references: [id], name: "FacilitatorFeedback: Facilitator", onDelete: Cascade)

  internId Int
  intern   Intern @relation(fields: [internId], references: [id], name: "FacilitatorFeedback: Intern", onDelete: Cascade)

  feedback String @db.VarChar(500)

  @@unique([classEventId, feedback])
}

model EventFeedback {
  id Int @id @default(autoincrement())

  senderId Int
  sender   Intern? @relation(fields: [senderId], references: [id], name: "EventFeedback: Sender", onDelete: Cascade)

  classEventId Int
  classEvent   ClassEvent? @relation(fields: [classEventId], references: [id], name: "EventFeedback: Event", onDelete: Cascade)

  feedback String @db.VarChar(500)

  @@unique([classEventId, feedback])
}

model Badge {
  id               Int                @id @default(autoincrement())
  badgeName        String             @db.VarChar(30)
  eventInternBadge EventInternBadge[]
}

model EventInternBadge {
  classEventId Int
  classEvent   ClassEvent @relation(fields: [classEventId], references: [id])

  badgeId Int
  badge   Badge @relation(fields: [badgeId], references: [id])

  internId Int
  intern   Intern @relation(fields: [internId], references: [id], name: "EventInternBadge: Intern", onDelete: Cascade)

  @@id([classEventId, badgeId, internId])
}

model InternCourse {
  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  internId Int
  intern   Intern @relation(fields: [internId], references: [id], name: "InternCourse: Intern", onDelete: Cascade)

  classRoleId Int
  classRole   ClassRole @relation(fields: [classRoleId], references: [id])

  @@id([internId, courseId])
}

model ClassRole {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(30)

  internCourse InternCourse[]
}

model ClassEventType {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(30)

  classEvent ClassEvent[]
}