generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model intern {
  id          Int     @id @default(autoincrement())
  first_name  String  @db.VarChar(50)
  last_name   String  @db.VarChar(50)
  email       String  @unique @db.VarChar(50)
  cohort      String? @db.VarChar(50)
  explorer_id String  @unique @db.VarChar(50)
  discord_id  String  @unique @db.VarChar(40)

  course_intern intern_course[] @relation(name: "intern_course: intern")

  sended_event_feedbacks event_feedback[] @relation(name: "event_feedback: sender")

  event_intern_badge event_intern_badge[] @relation(name: "event_intern_badge: intern")

  facilitator_feedbacks_facilitator facilitator_feedback[] @relation(name: "facilitator_feedback: facilitator")
  facilitator_feedbacks_intern      facilitator_feedback[] @relation(name: "facilitator_feedback: intern")

  oversight_feedback_oversight   oversight_feedback[] @relation(name: "oversight_feedback: oversight")
  oversight_feedback_facilitator oversight_feedback[] @relation(name: "oversight_feedback: facilitator")
}

model course {
  id          Int      @id @default(autoincrement())
  course_name String   @unique @db.VarChar(50)
  start_date  DateTime
  end_date    DateTime

  events        nobel_event[]
  course_intern intern_course[]
}

model nobel_event {
  id         Int      @id @default(autoincrement())
  meet_num   Int
  event_date DateTime

  course_id Int?
  course    course? @relation(fields: [course_id], references: [id])

  oversight_feedbacks   oversight_feedback[]
  facilitator_feedbacks facilitator_feedback[]
  event_intern_badge    event_intern_badge[]

  @@unique([course_id, meet_num])
}

model oversight_feedback {
  id Int @id @default(autoincrement())

  event_id    Int
  nobel_event nobel_event @relation(fields: [event_id], references: [id])

  oversight_id Int
  oversight    intern @relation(fields: [oversight_id], references: [id], name: "oversight_feedback: oversight")

  facilitator_id Int
  facilitator    intern @relation(fields: [facilitator_id], references: [id], name: "oversight_feedback: facilitator")

  feedback String @db.VarChar(500)

  @@unique([event_id, feedback])
}

model facilitator_feedback {
  id Int @id @default(autoincrement())

  event_id    Int
  nobel_event nobel_event @relation(fields: [event_id], references: [id])

  facilitator_id Int
  facilitator       intern @relation(fields: [facilitator_id], references: [id], name: "facilitator_feedback: facilitator")

  intern_id Int
  intern    intern @relation(fields: [intern_id], references: [id], name: "facilitator_feedback: intern")

  feedback String @db.VarChar(500)

  @@unique([event_id, feedback])
}

model event_feedback {
  id        Int    @id @default(autoincrement())
  event_id  Int
  sender_id Int
  comment   String @db.VarChar(500)

  sender intern? @relation(fields: [sender_id], references: [id], name: "event_feedback: sender")

  @@unique([event_id, comment])
}

model badge {
  id                 Int                  @id @default(autoincrement())
  badge_name         String               @db.VarChar(30)
  event_intern_badge event_intern_badge[]
}

model event_intern_badge {
  event_id Int
  event    nobel_event @relation(fields: [event_id], references: [id])

  badge_id Int
  badge    badge @relation(fields: [badge_id], references: [id])

  intern_id Int
  intern    intern @relation(fields: [intern_id], references: [id], name: "event_intern_badge: intern")

  @@id([event_id, badge_id, intern_id])
}

model intern_course {
  intern_id Int
  intern    intern @relation(fields: [intern_id], references: [id], name: "intern_course: intern")

  course_id Int
  course    course @relation(fields: [course_id], references: [id])

  role_id Int
  role    course_role @relation(fields: [role_id], references: [id])

  @@id([intern_id, course_id])
}

model course_role {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(30)

  intern_course_roles intern_course[]
}
