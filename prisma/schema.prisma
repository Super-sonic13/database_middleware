generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Contact {
  id               Int       @id @default(autoincrement())
  firstName        String?   @db.VarChar(50)
  lastName         String?   @db.VarChar(50)
  email            String?   @unique @db.VarChar(50)
  age              Int?      @db.TinyInt
  country          String?   @db.VarChar(50)
  timezone         String?   @db.VarChar(50)
  sourceOfReferral String?   @db.VarChar(50)
  city             String?   @db.VarChar(50)
  birthDate        DateTime?
  occupation       String?   @db.VarChar(50)
  gender           String?   @db.VarChar(20)

  eduQuestSelectedDateTime DateTime?
  eduQuestDecision         String?   @db.VarChar(50)
}

model Intern {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(100)
  surname String @db.VarChar(100)
  email   String @unique @db.VarChar(50)

  explorerId       String @unique @db.VarChar(50)
  explorerMail     String @unique @db.VarChar(50)
  explorerPassword String @db.VarChar(50)

  discordId       String? @unique @db.VarChar(100)
  discordNickname String? @unique @db.VarChar(50)

  cohort String? @db.VarChar(50)

  teachableId String? @unique @db.VarChar(15)

  age      Int    @db.TinyInt
  city     String @db.VarChar(50)
  country  String @db.VarChar(50)
  timezone String @db.VarChar(50)

  internCourse InternCourse[] @relation(name: "InternCourse: intern")

  facilitatorResult FacilitatorResult[] @relation(name: "FacilitatorResult: intern")
  oversightResult   OversightResult[]   @relation(name: "OversightResult: intern")

  eventInternBadge EventInternBadge[] @relation(name: "EventInternBadge: intern")
}

model Course {
  id                   Int      @id @default(autoincrement())
  courseName           String   @db.VarChar(150)
  courseCipher         String   @unique @db.VarChar(50)
  linkToClassMaterials String?  @db.VarChar(150)
  startDate            DateTime
  endDate              DateTime

  classEvent   ClassEvent[]
  internCourse InternCourse[] @relation(name: "InternCourse: course")
}

model ClassEvent {
  id             Int      @id @default(autoincrement())
  meetNumber     Int      @db.TinyInt
  eventDate      DateTime
  googleMeetLink String   @db.VarChar(50)

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  classEventTypeId Int
  classEventType   ClassEventType @relation(fields: [classEventTypeId], references: [id], name: "ClassEventType: classEvent", onDelete: Cascade)

  eventInternBadge  EventInternBadge[]  @relation(name: "EventInternBadge: classEvent")
  eventFeedback     EventFeedback[]     @relation(name: "EventFeedback: classEvent")
  facilitatorResult FacilitatorResult[] @relation(name: "FacilitatorResult: classEvent")
  oversightResult   OversightResult[]   @relation(name: "OversightResult: classEvent")
}

model EventFeedback {
  id Int @id @default(autoincrement())

  classEventId Int
  classEvent   ClassEvent? @relation(fields: [classEventId], references: [id], name: "EventFeedback: classEvent", onDelete: Cascade)

  feedback String @db.VarChar(500)
}

model Badge {
  id               Int                @id @default(autoincrement())
  badgeName        String             @db.VarChar(30)
  eventInternBadge EventInternBadge[]
}

model CourseResult {
  id Int @id @default(autoincrement())

  internCourseId Int
  internCourse   InternCourse @relation(fields: [internCourseId], references: [id], name: "CourseResult: internCourse", onDelete: Cascade)

  masteryResult String @db.VarChar(50)
  englishLevel  String @db.VarChar(50)
}

model FacilitatorResult {
  id Int @id @default(autoincrement())

  attendance            Boolean @default(false)
  techCheck             String  @db.VarChar(50)
  participationActivity String  @db.VarChar(500)
  comment               String? @db.VarChar(300)

  internId Int
  intern   Intern @relation(fields: [internId], references: [id], name: "FacilitatorResult: intern", onDelete: Cascade)

  classEventId Int
  classEvent   ClassEvent @relation(fields: [classEventId], references: [id], name: "FacilitatorResult: classEvent", onDelete: Cascade)
}

model OversightResult {
  id Int @id @default(autoincrement())

  attendance                  Boolean @default(false)
  techCheck                   String  @db.VarChar(50)
  english                     String  @db.VarChar(50)
  isEncouraging               Boolean @default(false)
  isOpenAsked                 Boolean @default(false)
  naturalCommunications       String
  isPrepared                  Boolean @default(false)
  isCheckedUnderstading       Boolean @default(false)
  isFacilitatorBrief          Boolean @default(false)
  publicSpeakingSkills        String  @db.VarChar(130)
  isPunctual                  Boolean @default(false)
  isOnTimeAttendanceFeedback  Boolean @default(false)
  isOptimalScreenPresentation Boolean @default(false)

  internId Int
  intern   Intern @relation(fields: [internId], references: [id], name: "OversightResult: intern", onDelete: Cascade)

  classEventId Int
  classEvent   ClassEvent @relation(fields: [classEventId], references: [id], name: "OversightResult: classEvent", onDelete: Cascade)
}

model EventInternBadge {
  id Int @id @default(autoincrement())

  classEventId Int
  classEvent   ClassEvent @relation(fields: [classEventId], references: [id], name: "EventInternBadge: classEvent", onDelete: Cascade)

  badgeId Int
  badge   Badge @relation(fields: [badgeId], references: [id])

  internId Int
  intern   Intern @relation(fields: [internId], references: [id], name: "EventInternBadge: intern", onDelete: Cascade)
}

model InternCourse {
  id Int @id @default(autoincrement())

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], name: "InternCourse: course", onDelete: Cascade)

  internId Int
  intern   Intern @relation(fields: [internId], references: [id], name: "InternCourse: intern", onDelete: Cascade)

  classRoleId Int
  classRole   ClassRole @relation(fields: [classRoleId], references: [id], name: "InternCourse: classRole", onDelete: Cascade)

  courseResult CourseResult[] @relation(name: "CourseResult: internCourse")
}

model ClassRole {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(30)

  internCourse InternCourse[] @relation(name: "InternCourse: classRole")
}

model ClassEventType {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(30)

  classEvent ClassEvent[] @relation(name: "ClassEventType: classEvent")
}

model CohortSchedule {
  id        Int       @id @default(autoincrement())
  eventDate DateTime?
  eventName String    @db.VarChar(80)
  cohort    String    @db.VarChar(50)
}
